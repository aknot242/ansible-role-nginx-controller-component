{# 
Most settings have sane defaults provided by Controller and do not need to be set here.
Not everything needs to be completed to have a successful confguration.
ingress uri, backend workload_group are the bare minimum.  
All else should only be completed if a value is passed.
Name is not required in metadata as it is being passed in the URI of the PUT. 
#}
{
    "desiredState": {
        "metadata": {
            "displayName": string,
            "description": string,
            "tags": [ tag ]
        },
        "ingress": {
            "uris": {
                "{{ingress_uri}}": { 
                    "matchMethod": ( PREFIX, REGEX, REGEX_CASE_SENSITIVE, SUFFIX, EXACT )
                    "tls": {
                        "certRef": { ref: }
                        "protocols": string
                        "cipher": string
                        "preferServiceCipherServiceConfigState": (ENABLED, DISABLED)
                        "sessionCache": (OFF, NONE, BUILTIN, SHARED)
                    }
                },
                "methods": [ POST, GET, PUT, DELETE, PATCH, HEAD, TRACE, OPTIONS, CONNECT ],
                "headers": [  ],
                "http2": (ENABLED, DISABLED),
                "spdy": (ENABLED, DISABLED),
                "proxyProtocol": (ENABLED, DISABLED),
                "setFib": int,
                "fastOpen": int,
                "backlog": int,
                "receiveBufferSize": string,
                "sendBufferSize": string,
                "acceptFilter": (DATA_READY, HTTP_READY),
                "deferred": (ENABLED, DISABLED),
                "isIpv6Only": bool,
                "reusePort": (ENABLED, DISABLED),
                "tls": { 
                    certRef: { ref: }
                    protocols: string
                    cipher: string
                    preferServiceCipherServiceConfigState: (ENABLED, DISABLED) 
                    sessionCache: (OFF, NONE, BUILTIN, SHARED)
                },
                "notFoundStatusCode": int,
                "gatewayRefs": [
                    { ref: }
                ],
                "tcpKeepAlive": {
                    state: (ENABLED, DISABLED)
                    idle: string
                    interval: string
                    count: int
                }
            },
        },
        "backend": {
            "workloadGroups": [
                {{workload_group}}: 
                    {
                        "locationRefs": [
                            { ref: }
                        ],
                        "uris": [
                            {{workload_uri}}: {
                                "weight": int,
                                "maxConns": int,
                                "maxFails": int,
                                "failTimeout": string,
                                "isBackup": bool,
                                "isDown": bool,
                                "resolve": ( ENABLED, DISABLED ),
                                "route": string,
                                "service": string,
                                "slowStart": int,
                                "isDrain": bool
                            }
                        ],
                        "loadBalancingMethod": ( ROUND_ROBIN, IPHASH, LEAST_CONNECTIONS, HASH: { type: userKey: consistentHash (ENABLED, DISABLED) }, LEAST_TIME: {HEADER, LAST_BYTE, LAST_BYTE_INFLIGHT} , RANDOM: {LEAST_CONNECTIONS, LEAST_TIME_HEADER, LEAST_TIME_LAST_BYTE} )
                        "sessionPersistence": ( COOKIE: {srvID: string, expireTime: string, domain: string, path: string}, ROUTE: { routeInfoLocation: (COOKIE, URI, BOTH), COOKIE_LEARN: { create: string, lookup: string }  }  )
                        "serviceDiscovery":
                            "dnsResolver": {
                                "uris": 
                                "ttl": 
                                "failTimeout":
                            }
                    }
            ],
            "monitoring": {
                "defaultState": ( HEALTHY, UNHEALTHY ),
                "interval": int,
                "timeout": int,
                "consecutiveSuccessThreshold": int,
                "consecutiveFailureThreshold": int,
                "port": int,
                "uri": string,
                "response": {
                    "status": {
                        "range": {
                            "startCode": int,
                            "endCode": int
                        },
                        "codes": [ ],
                        "match": bool
                    },
                    "headers": {
                        "content": string,
                        "match": bool
                    },
                    "body": {
                        "content": string,
                        "match": bool
                    }
                }
            },
            "preserveHostHeader": ( ENABLED, DISABLED ),
            "keepAlive": {
                "connections": int,
                "requestsPerConn": int,
                "idleTimeout": string
            },
            "queue": {
                "lenght": int,
                "timeOut": string
            },
            "httpVersion": string,
            "ntlmAuthentication": ( ENABLED, DISABLED ),
            "persistentState": string
        },
        "programmability": {
            "uriRewrites": [
                {
                    "incomingPattern": string,
                    "rewritePattern": string
                }
            ],
            "httpHttpsRedirect": ( ENABLED, DISABLED ),
            "uriRedirects": [
                {
                    "incomingPattern": string,
                    "rewritePattern": string,
                    "responseCode": int
                }
            ],
            "cookieModifications": [
                {
                "action": ( ADD, MODIFY, DELETE ),
                "cookieName": string,
                "cookieValue": string 
                }
            ],
            'requestHeaderModifications': [
                {
                    'action': ADD,
                    "headerName": ,
                    "headerValue": 
                },
                { 
                    "action": MODIFY,
                    "headerName": ,
                    "incomingValuePattern": ,
                    "rewriteValuePattern": 
                },
                { 
                    "action": DELETE,
                    "headerName": ,
                    "incomingValuePattern": 
                }
            ],
            'responseHeaderModifications': [
                {
                    'action': ADD,
                    "headerName": ,
                    "headerValue": 
                },
                { 
                    "action": MODIFY,
                    "headerName": ,
                    "incomingValuePattern": ,
                    "rewriteValuePattern": 
                },
                { 
                    "action": DELETE,
                    "headerName": ,
                    "incomingValuePattern": 
                }
            ]
        },
        "logging": {
            "errorLog": ( ENABLED, DISABLED ),
            "accessLog": ( ENABLED, DISABLED )
        },
        "security": {
            "strategyRef": { ref: }
            "waf": {
                "isEnabled": bool,
                "isMonitorOnly": bool,
                "signatureOverrides": {
                    "action": IGNORE
                },
                "technologyStack": []
            },
            "identityProviderRefs": [ 
                { ref: }
            ],
            "apiKeyClientAuth": {
                "keyLocation": ( HEADER, QUERY_PARAM ),
                "key": string
            },
            "jwtClientAuth": {
                "keyLocation": ( BEARER, HEADER, QUERY_PARAM, COOKIE ),
                "key": string
            },
            "conditionalAuth": {
                "sourceType": ( HEADER, JWT_CLAIM ),
                "sourceKey": string,
                "comparisonType": ( EQUALS, NOT_EQUALS, IN, CONTAINS ),
                "comparisonValues": string,
                "action": ( ALLOW, DENY ),
                "denyStatusCode": int
            },
            "rateLimit": {
                "rate": int,
                "rateMeasure": ( SECONDS, MINUTES ),
                "burst": int,
                "delay": int,
                "statusCode": int,
                "key": nginx_variable
            },
            "interceptWorkloadErrors": ( ENABLED, DISABLED )
        },
        "publishedApiRefs": [ 
            { ref: }
        ]
        }
    }
}

{# 
Most settings have sane defaults provided by Controller and do not need to be set here.
Not everything needs to be completed to have a successful confguration.
ingress uri, backend workload_group are the bare minimum.  
All else should only be completed if a value is passed.
Name is not required in metadata as it is being passed in the URI of the PUT. 
#}
{
    "metadata": {
        "name": "{{component.name}}"
    {% if component.displayName is defined %}
        ,"displayName": "{{component.displayName}}"
    {% endif %}
    {% if component.description is defined %}
        ,"description": "{{component.description}}"
    {% endif %}
    {% if component.tags[0] is defined %}
        ,"tags": [
        {% for tag in component.tags %}
            "{{tag}}"{% if not loop.last %},{% endif %}
        {% endfor %}
        ]
    {% endif %}
    },
    "desiredState": {
        "ingress": {
            "uris": {
    {% for uri in ingress.uris %}
                "{{uri}}": { 
        {% if uri.matchMethod is defined %}
                    "matchMethod": "{{uri.matchMethod}}",
        {% endif %}
        {% if uri.tls.certRef.ref is defined %}
                    "tls": {
                        "certRef": { "ref": "{{uri.tls.certRef.ref}}" }
            {% if uri.tls.protocols[0] is defined %}
                        ,"protocols": [
                {% for protocol in uri.tls.protocols %}
                            "{{protocol}}"{% if not loop.last %},{% endif %}
                {% endfor %}{{''}}
                        ]
            {% endif %}
            {% if uri.tls.cipher is defined %}
                        ,"cipher": "{{uri.tls.cipher}}"
            {% endif %}
            {% if uri.tls.preferServiceCipherServiceConfigState is defined %}
                        ,"preferServiceCipherServiceConfigState": "{{uri.tls.preferServiceCipherServiceConfigState}}"
            {% endif %}
            {% if uri.tls.sessionCache is defined %}
                        ,"sessionCache": "{{uri.tls.sessionCache}}"
            {% endif %}
                    }
        {% endif %}
                }{% if not loop.last %},{% endif %}
    {% endfor %}{{''}}
            }
    {% if ingress.methods is defined %}
            ,"methods": [
        {% for method in ingress.methods %}
                "{{method}}"{% if not loop.last %},{% endif %}
        {% endfor %}{{''}}
            ]
    {% endif %}
    {% if ingress.headers is defined %}
            ,"headers": [
        {% for header in ingress.headers %}
                {
            {% if header.name is defined %}
                    "name": "{{header.name}}",
                    "nameMatchMethod": "{{header.nameMatchMethod}}"
            {% endif %}
            {% if header.value is defined %}
                    "value": "{{header.value}}",
                    "valueMatchMethod": "{{header.valueMatchMethod}}"
            {% endif %}
                }{% if not loop.last %},{% endif %}
        {% endfor %}{{''}}
            ]
    {% endif %}
    {% if ingress.http2 is defined %}
            ,"http2": "{{ingress.http2}}"
    {% endif %}
    {% if ingress.spdy is defined %}
            ,"spdy": "{{ingress.spdy}}"
    {% endif %}
    {% if ingress.proxyProtocol is defined %}
            ,"proxyProtocol": "{{ingress.proxyProtocol}}"
    {% endif %}
    {% if ingress.setFib is defined %}
            ,"setFib": "{{ingress.setFib}}"
    {% endif %}
    {% if ingress.fastOpen is defined %}
            ,"fastOpen": "{{ingress.fastOpen}}"
    {% endif %}
    {% if ingress.backlog is defined %}
            ,"backlog": "{{ingress.backlog}}"
    {% endif %}
    {% if ingress.receiveBufferSize is defined %}
            ,"receiveBufferSize": "{{ingress.receiveBufferSize}}"
    {% endif %}
    {% if ingress.sendBufferSize is defined %}
            ,"sendBufferSize": "{{ingress.sendBufferSize}}"
    {% endif %}
    {% if ingress.acceptFilter is defined %}
            ,"acceptFilter": "{{ingress.acceptFilter}}"
    {% endif %}
    {% if ingress.deferred is defined %}
            ,"deferred": "{{ingress.deferred}}"
    {% endif %}
    {% if ingress.isIpv6Only is defined %}
            ,"isIpv6Only": "{{ingress.isIpv6Only}}"
    {% endif %}
    {% if ingress.reusePort is defined %}
            ,"reusePort": "{{ingress.reusePort}}"]
    {% endif %}
    {% if ingress.tls.certRef.ref is defined %}
            ,"tls": {
                "certRef": { "ref": "{{ingress.tls.certRef.ref}}" }
    {% endif %}
    {% if ingress.tls.protocols[0] is defined %}                
                ,"protocols": [
        {% for protocol in ingress.tls.protocols %}
                    "{{protocol}}"{% if not loop.last %},{% endif %}
        {% endfor %}{{''}}
                ]
    {% endif %}
    {% if ingress.tls.cipher is defined %}
                ,"cipher": "{{ingress.tls.cipher}}"
                {% endif %}
    {% if ingress.tls.preferServiceCipherServiceConfigState is defined %}
                ,"preferServiceCipherServiceConfigState": "{{ingress.tls.preferServiceCipherServiceConfigState}}"
    {% endif %}
    {% if ingress.tls.sessionCache is defined %}
                ,"sessionCache": "{{ingress.tls.sessionCache}}"
    {% endif %}
            }
    {% if ingress.tcpKeepAlive.idle is defined %}
            ,"tcpKeepAlive": {
                "idle": "string",
                "interval": "string",
                "count": 0
            }
    {% endif %}
    {% if ingress.notFoundStatusCode is defined %}
            ,"notFoundStatusCode": "{{ingress.notFoundStatusCode}}"
    {% endif %}
            ,"gatewayRefs": [
    {% for gatewayRef in ingress.gatewayRefs %}
                {
                    "ref": "{{gatewayRef}}"
                }{% if not loop.last %},{% endif %}
    {% endfor %}{{''}}
            ]
        },
        "backend": {
            "workloadGroups": [
                {
                    "{{workload_group}}": 
                        {
                            "locationRefs": [
                                { "ref": "{{workload_location_ref}}" }
                            ],
                            "uris": [
                                {
                                    "{{workload_uri}}": {
                                    "weight": 0,
                                    "maxConns": 0,
                                    "maxFails": 0,
                                    "failTimeout": "string",
                                    "isBackup": "bool",
                                    "isDown": "bool",
                                    "resolve": ["ENABLED", "DISABLED"],
                                    "route": "string",
                                    "service": "string",
                                    "slowStart": 0,
                                    "isDrain": "bool"
                                    }
                                }
                            ],
                            "loadBalancingMethod": [ "ROUND_ROBIN", "IPHASH", "LEAST_CONNECTIONS", {"HASH": { "type": null, "userKey": null, "consistentHash": ["ENABLED", "DISABLED"] }}, {"LEAST_TIME": ["HEADER", "LAST_BYTE", "LAST_BYTE_INFLIGHT"]} , {"RANDOM": ["LEAST_CONNECTIONS", "LEAST_TIME_HEADER", "LEAST_TIME_LAST_BYTE"]} ],
                            "sessionPersistence": [ {"COOKIE": [{"srvID": "string"}, {"expireTime": "string"}, {"domain": "string"}, {"path": "string"}]}, {"ROUTE": ["COOKIE", "URI", "BOTH"]}, {"COOKIE_LEARN": [{"create": "string"}, {"lookup": "string"}]}  ],
                            "serviceDiscovery":
                                {
                                    "dnsResolver": {
                                        "uris": "string",
                                        "ttl": "string",
                                        "failTimeout": "string"
                                }
                            }
                        }
                }
            ],
            "monitoring": {
                "defaultState": ["HEALTHY", "UNHEALTHY"],
                "interval": 0,
                "timeout": 0,
                "consecutiveSuccessThreshold": 0,
                "consecutiveFailureThreshold": 0,
                "port": 0,
                "uri": "string",
                "response": {
                    "status": {
                        "range": {
                            "startCode": 0,
                            "endCode": 0
                        },
                        "codes": [ ],
                        "match": "bool"
                    },
                    "headers": {
                        "content": "string",
                        "match": "bool"
                    },
                    "body": {
                        "content": "string",
                        "match": "bool"
                    }
                }
            },
            "preserveHostHeader": ["ENABLED", "DISABLED"],
            "keepAlive": {
                "connections": 0,
                "requestsPerConn": 0,
                "idleTimeout": "string"
            },
            "queue": {
                "lenght": 0,
                "timeOut": "string"
            },
            "httpVersion": "string",
            "ntlmAuthentication": ["ENABLED", "DISABLED"],
            "persistentState": "string"
        },
        "programmability": {
            "uriRewrites": [
                {
                    "incomingPattern": "string",
                    "rewritePattern": "string"
                }
            ],
            "httpHttpsRedirect": ["ENABLED", "DISABLED"],
            "uriRedirects": [
                {
                    "incomingPattern": "string",
                    "rewritePattern": "string",
                    "responseCode": 0
                }
            ],
            "cookieModifications": [
                {
                "action": ["ADD", "MODIFY", "DELETE"],
                "cookieName": "string",
                "cookieValue": "string" 
                }
            ],
            "requestHeaderModifications": [
                {
                    "action": "ADD",
                    "headerName": "string",
                    "headerValue": "string"
                },
                { 
                    "action": "MODIFY",
                    "headerName": "string",
                    "incomingValuePattern": "regex",
                    "rewriteValuePattern": "regex"
                },
                { 
                    "action": "DELETE",
                    "headerName": "string",
                    "incomingValuePattern": "regex"
                }
            ],
            "responseHeaderModifications": [
                {
                    "action": "ADD",
                    "headerName": "string",
                    "headerValue": "string"
                },
                { 
                    "action": "MODIFY",
                    "headerName": "string",
                    "incomingValuePattern": "regex",
                    "rewriteValuePattern": "regex"
                },
                { 
                    "action": "DELETE",
                    "headerName": "string",
                    "incomingValuePattern": "regex" 
                }
            ]
        },
        "logging": {
            "errorLog": ["ENABLED", "DISABLED"],
            "accessLog": ["ENABLED", "DISABLED"]
        },
        "security": {
            "strategyRef": { "ref": "{{sec_strategy_ref}}" },
            "waf": {
                "isEnabled": "bool",
                "isMonitorOnly": "bool",
                "signatureOverrides": {
                    "action": "IGNORE"
                },
                "technologyStack": []
            },
            "identityProviderRefs": [ 
                { "ref": "{{apim_id_provider_ref}}"}
            ],
            "apiKeyClientAuth": {
                "keyLocation": ["HEADER", "QUERY_PARAM"],
                "key": "string"
            },
            "jwtClientAuth": {
                "keyLocation": ["BEARER", "HEADER", "QUERY_PARAM", "COOKIE"],
                "key": "string"
            },
            "conditionalAuth": {
                "sourceType": ["HEADER", "JWT_CLAIM"],
                "sourceKey": "string",
                "comparisonType": ["EQUALS", "NOT_EQUALS", "IN", "CONTAINS"],
                "comparisonValues": "string",
                "action": ["ALLOW", "DENY"],
                "denyStatusCode": 0
            },
            "rateLimit": {
                "rate": 0,
                "rateMeasure": ["SECONDS", "MINUTES"],
                "burst": 0,
                "delay": 0,
                "statusCode": 0,
                "key": "{{rate_nginx_variable}}"
            },
            "interceptWorkloadErrors": ["ENABLED", "DISABLED"]
        },
        "publishedApiRefs": [ 
            { "ref": "{{published_api_ref}}"}
        ]
    }
}
